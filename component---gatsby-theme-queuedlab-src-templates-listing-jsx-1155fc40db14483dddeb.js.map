{"version":3,"sources":["webpack://main-blog/../node_modules/classnames/index.js","webpack://main-blog/../gatsby-theme-queuedlab/src/components/PostListing/PostListing.jsx","webpack://main-blog/../gatsby-theme-queuedlab/src/components/PostListing/PostListing.module.scss","webpack://main-blog/../gatsby-theme-queuedlab/src/components/SEO/SEO.jsx","webpack://main-blog/../gatsby-theme-queuedlab/src/templates/listing.module.scss","webpack://main-blog/../gatsby-theme-queuedlab/src/templates/listing.jsx"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","getPostList","postList","this","props","postEdges","forEach","postEdge","path","node","fields","slug","category","frontmatter","tags","cover","title","summary","date","moment","format","config","excerpt","timeToRead","render","className","map","post","Link","to","React","SEO","description","image","postURL","postNode","postPath","postSEO","postMeta","imageURI","match","authorJSONLD","name","email","address","blogURL","schemaOrgJSONLD","datePublished","itemListElement","position","headline","url","author","dateModified","content","type","JSON","stringify","property","Component","page","Page","pageNum","isCurrentPage","currentPageNum","classnames","style","renderPagination","pageContext","pageCount","prevPage","nextPage","isFirstPage","isLastPage","aria-label","_val","index","data","allMarkdownRemark","edges","Helmet","PostListing"],"mappings":"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","file":"component---gatsby-theme-queuedlab-src-templates-listing-jsx-1155fc40db14483dddeb.js","sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg)) {\n        if (arg.length) {\n          var inner = classNames.apply(null, arg);\n\n          if (inner) {\n            classes.push(inner);\n          }\n        }\n      } else if (argType === 'object') {\n        if (arg.toString === Object.prototype.toString) {\n          for (var key in arg) {\n            if (hasOwn.call(arg, key) && arg[key]) {\n              classes.push(key);\n            }\n          }\n        } else {\n          classes.push(arg.toString());\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import React from \"react\";\nimport _ from \"lodash\";\nimport { Link, graphql } from \"gatsby\";\nimport config from \"../../../data/site-config\";\nimport moment from \"../../utils/moment\";\nimport * as style from \"./PostListing.module.scss\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        category: postEdge.node.frontmatter.category,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        summary: postEdge.node.frontmatter.summary,\n        date: moment(postEdge.node.frontmatter.date).format(config.dateFormat),\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n\n  render() {\n    const postList = this.getPostList();\n    return (\n      <ul className={style.postList}>\n        {/* Your post list here. */\n        postList.map(post => (\n          <li className={style.postCard} key={post.title}>\n            <h3 className={style.postTitle}>\n              <Link to={post.path}>{post.title}</Link>\n            </h3>\n            {post.category\n            ? (\n              <Link className={style.postCategory} to={`/categories/${_.kebabCase(post.category)}`}>\n                {post.category}\n              </Link>\n            ) : null}\n            <time className={style.postDate}>{post.date}</time>\n            {post.summary\n            ? <div className={style.postSummary}>{post.summary}</div>\n            : null}\n          </li>\n        ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default PostListing;\n\nexport const query = graphql`\n  fragment PostMetadata on MarkdownRemark {\n    excerpt\n    timeToRead\n    frontmatter {\n      title\n      date\n      category\n      tags\n      cover\n      summary\n    }\n    fields {\n      slug\n    }\n  }\n`\n","// extracted by mini-css-extract-plugin\nexport var postList = \"PostListing-module--postList--a9nBb\";\nexport var postCard = \"PostListing-module--postCard--3gm17\";\nexport var postTitle = \"PostListing-module--postTitle--i5Ved\";\nexport var postCategory = \"PostListing-module--postCategory--OXFE2\";\nexport var postDate = \"PostListing-module--postDate--p2LuX\";\nexport var postSummary = \"PostListing-module--postSummary--2M7sN\";","import React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport config from \"../../../data/site-config\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.summary ? postMeta.summary : postNode.excerpt;\n      image = postMeta.cover ? postMeta.cover : config.siteLogo;\n      postURL = config.getFullPath(postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n\n    const getImagePath = (imageURI) => {\n      if (!imageURI.match(\n        `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`\n      )) {\n        return config.getFullPath(imageURI);\n      }\n      return imageURI;\n    };\n\n    image = getImagePath(image);\n\n    const authorJSONLD = {\n      \"@type\": \"Person\",\n      name: config.userName,\n      email: config.userEmail,\n      address: config.userLocation,\n    };\n\n    const blogURL = config.getFullPath(\"/\");\n    const schemaOrgJSONLD = [];\n\n    // TODO: separate this logic\n    if (postSEO) {\n      const getPublicationDate = () => {\n        if (!postNode) return null;\n        if (!postNode.frontmatter) return null;\n        if (!postNode.frontmatter.date) return null;\n\n        return postNode.frontmatter.date;\n      };\n      \n      const datePublished = getPublicationDate();\n\n      schemaOrgJSONLD.push(\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              name: title,\n            },\n          ],\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          \"mainEntityOfPage\": {\n            \"@type\": \"WebPage\",\n            \"@id\": postURL\n          },\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          author: authorJSONLD,\n          datePublished,\n          dateModified: datePublished, // TODO: add modified date\n        }\n      );\n    }\n\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","// extracted by mini-css-extract-plugin\nexport var pagination = \"listing-module--pagination--3ivl7\";\nexport var page = \"listing-module--page--1bUw7\";\nexport var current = \"listing-module--current--3pa53\";","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql, Link } from \"gatsby\";\nimport classnames from \"classnames\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/site-config\";\nimport * as style from \"./listing.module.scss\";\n\n\nconst Page = ({pageNum, currentPageNum}) => {\n  const isCurrentPage = pageNum === currentPageNum;\n  return (\n    <Link\n      key={pageNum}\n      to={pageNum === 1 ? \"/\" : `/${pageNum}/`}\n      className={classnames([style.page, isCurrentPage && style.current])}\n    >\n      {pageNum}\n    </Link>\n  );\n}\n\nclass Listing extends React.Component {\n\n  renderPagination() {\n    const { currentPageNum, pageCount } = this.props.pageContext;\n    const prevPage = currentPageNum - 1 === 1 ? \"/\" : `/${currentPageNum - 1}/`;\n    const nextPage = `/${currentPageNum + 1}/`;\n    const isFirstPage = currentPageNum === 1;\n    const isLastPage = currentPageNum === pageCount;\n\n    return (\n      <nav aria-label=\"pagination\" className={style.pagination}>\n        {!isFirstPage && <Link to={prevPage} className={style.page}>Previous</Link>}\n        {[...Array(pageCount)].map((_val, index) => (\n          <Page pageNum={index+1} currentPageNum={currentPageNum} />\n        ))}\n        {!isLastPage && <Link to={nextPage} className={style.page}>Next</Link>}\n      </nav>\n    );\n  }\n\n  render() {\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n\n    return (\n      <Layout>\n        <Helmet title={config.siteTitle} />\n        <SEO />\n        <PostListing postEdges={postEdges} />\n        {this.renderPagination()}\n      </Layout>\n    );\n  }\n}\n\nexport default Listing;\n\n/* eslint no-undef: \"off\" */\nexport const listingQuery = graphql`\n  query ListingQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          ...PostMetadata\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}